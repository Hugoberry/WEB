// <auto-generated />
using Iserv.Niis.DataAccess.EntityFramework;
using Iserv.Niis.Domain.Enums;
using Iserv.Niis.Domain.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Iserv.Niis.DataAccess.EntityFramework.Migrations
{
    [DbContext(typeof(NiisWebContext))]
    [Migration("20190711032026_Add_DicRouteStage_NextStage_Relation_To_PaymentInvoiceChargingRule")]
    partial class Add_DicRouteStage_NextStage_Relation_To_PaymentInvoiceChargingRule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AccountingData.CustomerAttorneyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<DateTimeOffset?>("DateBeginStop");

                    b.Property<DateTimeOffset?>("DateCard");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateDisCard");

                    b.Property<DateTimeOffset?>("DateEndStop");

                    b.Property<DateTimeOffset?>("DatePublic");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Education");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("FieldOfActivity");

                    b.Property<string>("FieldOfKnowledge");

                    b.Property<string>("GovReg");

                    b.Property<DateTimeOffset?>("GovRegDate");

                    b.Property<string>("Language");

                    b.Property<string>("PaymentOrder");

                    b.Property<string>("PublicRedefine");

                    b.Property<string>("Redefine");

                    b.Property<string>("RegCode");

                    b.Property<string>("SomeDate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("WorkPlace");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAttorneyInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(2147483647);

                    b.Property<string>("AddressEn");

                    b.Property<string>("AddressKz");

                    b.Property<string>("Apartment");

                    b.Property<string>("ApplicantsInfo");

                    b.Property<int?>("BeneficiaryTypeId");

                    b.Property<string>("CertificateNumber");

                    b.Property<string>("CertificateSeries");

                    b.Property<string>("City");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("ContactName");

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsBeneficiary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNotMention")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsSMB");

                    b.Property<string>("JurRegNumber");

                    b.Property<string>("Login");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameEnLong");

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKzLong");

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRuLong");

                    b.Property<string>("NotaryName");

                    b.Property<string>("Oblast");

                    b.Property<string>("Opf");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneFax");

                    b.Property<DateTimeOffset?>("PowerAttorneyDateIssue");

                    b.Property<string>("PowerAttorneyFullNum");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("Region");

                    b.Property<string>("Republic");

                    b.Property<string>("Rnn");

                    b.Property<string>("ShortAddress")
                        .HasMaxLength(2147483647);

                    b.Property<string>("ShortDocContent");

                    b.Property<string>("Street");

                    b.Property<string>("Subscript");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.Property<string>("Xin");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TypeId");

                    b.ToTable("DicCustomers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoNotificationDocumentGeneration.AutoGenerateNotificationDocumentByPetitionAndPaymentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("NotificationTypeId");

                    b.Property<int>("PetitionTypeId");

                    b.Property<int>("StageId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("StageId");

                    b.HasIndex("TariffId");

                    b.ToTable("NotificationDocumentByPetitionAndPaymentRules");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoNotificationDocumentGeneration.AutoGenerateNotificationDocumentByStageRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("NotificationTypeId");

                    b.Property<int>("StageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("StageId");

                    b.ToTable("NotificationDocumentByStageRules");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoPaymentInvoiceGeneration.PaymentInvoiceGenerationByPetitionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("PetitionTypeId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("TariffId");

                    b.ToTable("PaymentInvoiceByPetitionRules");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoPaymentInvoiceGeneration.PaymentInvoiceGenerationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("StageId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.HasIndex("TariffId");

                    b.ToTable("PaymentInvoiceGenerationRules");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("CurrentStageId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("NextStageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("NextStageId");

                    b.ToTable("AutoRouteStages");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStageEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AutoRouteStageId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("PositionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AutoRouteStageId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TypeId");

                    b.ToTable("AutoRouteStageEvents");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStageViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AutoRouteStageId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("PositionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("AutoRouteStageId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TypeId");

                    b.ToTable("AutoRouteStageViewers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.RequestAutoRouteStageExecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("PositionId");

                    b.Property<int>("StageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("StageId");

                    b.ToTable("RequestAutoRouteStageExecutors");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.BibliographicData.MadeChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChangeTypeId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("FromStageId");

                    b.Property<int?>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("RequestId");

                    b.ToTable("MadeChanges");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Bulletin.Bulletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("FilePath");

                    b.Property<string>("Number");

                    b.Property<DateTimeOffset?>("PublishDate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Bulletin");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Bulletin.BulletinSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("BulletinSections");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Calendar.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("EventTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddresseeAddress");

                    b.Property<int?>("AddresseeId");

                    b.Property<int?>("ApplicantTypeId");

                    b.Property<DateTimeOffset?>("ApplicationDateCreate");

                    b.Property<string>("ApplicationNum");

                    b.Property<int>("Barcode");

                    b.Property<DateTimeOffset?>("BulletinDate");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Changes");

                    b.Property<string>("ContractNum");

                    b.Property<int?>("CopyCount");

                    b.Property<int?>("CurrentWorkflowId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<int?>("DivisionId");

                    b.Property<DateTimeOffset?>("ExtensionDate");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FullExpertiseExecutorId");

                    b.Property<DateTimeOffset?>("GosDate");

                    b.Property<string>("GosNumber");

                    b.Property<DateTimeOffset?>("IncomingDate");

                    b.Property<string>("IncomingNumber");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("MainAttachmentId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberBulletin");

                    b.Property<DateTimeOffset?>("OutgoingDate");

                    b.Property<string>("OutgoingNumber");

                    b.Property<int?>("PageCount");

                    b.Property<string>("PaperworkStateRegister");

                    b.Property<int>("ProtectionDocTypeId");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegistrationPlace");

                    b.Property<int?>("StatusId");

                    b.Property<DateTimeOffset?>("TerminateDate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TypeId");

                    b.Property<string>("ValidDate");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentWorkflowId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("FullExpertiseExecutorId");

                    b.HasIndex("MainAttachmentId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.HasIndex("ReceiveTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressEn");

                    b.Property<string>("AddressKz");

                    b.Property<int?>("ContractId");

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("CustomerRoleId");

                    b.Property<DateTimeOffset?>("DateBegin");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Email");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneFax");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("ContractCustomers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DocumentId");

                    b.ToTable("ContractsDocuments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractNotificationStatus", b =>
                {
                    b.Property<int>("ContractId");

                    b.Property<int>("NotificationStatusId");

                    b.HasKey("ContractId", "NotificationStatusId");

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("ContractsNotificationStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractProtectionDocICGSProtectionDocRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractProtectionDocRelationId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ICGSProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractProtectionDocRelationId");

                    b.HasIndex("ICGSProtectionDocId");

                    b.ToTable("Contract_ProtectionDoc_ICGSProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractRequestICGSRequestRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractRequestRelationId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ICGSRequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractRequestRelationId");

                    b.HasIndex("ICGSRequestId");

                    b.ToTable("Contract_Request_ICGSRequest");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ControlDate");

                    b.Property<int?>("CurrentStageId");

                    b.Property<int?>("CurrentUserId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateReceived");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FromStageId");

                    b.Property<int?>("FromUserId");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsMain");

                    b.Property<bool?>("IsSystem");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("PreviousWorkflowId");

                    b.Property<int?>("RouteId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RouteId");

                    b.ToTable("ContractWorkflows");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("DicCustomerId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("Info");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("DicCustomerId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicApplicantTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicBeneficiaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicBeneficiaryTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicBiblioChangeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicBiblioChangeTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicColorTZ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicColorTZs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicConsiderationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocTypeId");

                    b.ToTable("DicConsiderationTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicContactInfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicContactInfoTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("StageOneId");

                    b.Property<int?>("StageTwoId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("StageOneId");

                    b.HasIndex("StageTwoId");

                    b.ToTable("DicContractTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int>("DepartmentTypeId");

                    b.Property<string>("Description");

                    b.Property<int>("DivisionId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMonitoring");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<string>("ShortNameRu");

                    b.Property<string>("TNameRu");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("DivisionId");

                    b.ToTable("DicDepartments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDetailICGS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IcgsId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameFr");

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IcgsId");

                    b.ToTable("DicDetailICGSs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("IncomingNumberCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMonitoring");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicDivisions");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DicDocumentClassifications");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicDocumentStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClassificationId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("ConServiceTypeCode");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("Interval");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsRequireSigning");

                    b.Property<bool?>("IsSendByEmail");

                    b.Property<bool?>("IsUnique");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("Order");

                    b.Property<int?>("RouteId");

                    b.Property<int?>("TemplateFileId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("RouteId");

                    b.HasIndex("TemplateFileId");

                    b.ToTable("DicDocumentTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicDocumentTypeGroups");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentTypeGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentTypeGroupId");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeGroupId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DicDocumentTypeGroupTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocTypeId");

                    b.ToTable("DicEarlyRegTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicEntityAccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DocumentAccessPermissionsId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentAccessPermissionsId");

                    b.ToTable("DicEntityAccessTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicEventTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicICFEM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DicICFEMs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicICGS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionShort");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int>("RevisionNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicICGSs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicICIS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ParentId");

                    b.Property<int>("RevisionNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DicICISs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicIntellectualPropertyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicIntellectualPropertyStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EntryLevel");

                    b.Property<string>("EntryType");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Kind");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ParentId");

                    b.Property<int>("RevisionNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DicIPCs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicContractCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicContractCategories");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicContractStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicConventionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicConventionTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicCustomerRoles");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicCustomerTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicDepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicDepartmentTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicLocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicLocationTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicLogTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicOnlineRequisitionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicOnlineRequisitionStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocBulletinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicProtectionDocBulletinTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicProtectionDocStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocTMType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicProtectionDocTMTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicReceiveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("Group");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicReceiveTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRedefinitionDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicRedefinitionDocumentTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRedefinitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicRedefinitionTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicRoutes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicSendType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicSendTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicNotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicNotificationStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicPaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicPaymentStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsHead");

                    b.Property<bool>("IsMonitoring");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int>("PositionTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionTypeId");

                    b.ToTable("DicPositions");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicPositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicPositionTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocStatusRoute", b =>
                {
                    b.Property<int>("DicProtectionDocStatusId");

                    b.Property<int>("DicRouteId");

                    b.HasKey("DicProtectionDocStatusId", "DicRouteId");

                    b.HasIndex("DicRouteId");

                    b.ToTable("DicProtectionDocStatusesRoutes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<string>("S1");

                    b.Property<string>("S1Kz");

                    b.Property<string>("S2");

                    b.Property<string>("S2Kz");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("DicProtectionDocSubTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DepatmentId");

                    b.Property<string>("Description");

                    b.Property<string>("DkCode");

                    b.Property<string>("DocTypeText");

                    b.Property<string>("DocTypeTextKz");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int>("RouteId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RouteId");

                    b.ToTable("DicProtectionDocTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicRequestStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatusRoute", b =>
                {
                    b.Property<int>("DicRequestStatusId");

                    b.Property<int>("DicRouteId");

                    b.HasKey("DicRequestStatusId", "DicRouteId");

                    b.HasIndex("DicRouteId");

                    b.ToTable("DicRequestStatusesRoutes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRequisitionFeedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocTypeId");

                    b.ToTable("DicRequisitionFeedTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int?>("ContractStatusId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DicDocumentStatusId");

                    b.Property<int>("ExpirationType");

                    b.Property<short?>("ExpirationValue");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FinishConServiceStatusId");

                    b.Property<int?>("Interval");

                    b.Property<bool>("IsAuto");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFirst");

                    b.Property<bool>("IsLast");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsMultiUser");

                    b.Property<bool?>("IsReturnable");

                    b.Property<bool?>("IsSign");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("OnlineRequisitionStatusId");

                    b.Property<int?>("ProtectionDocStatusId");

                    b.Property<int?>("RequestStatusId");

                    b.Property<int?>("RouteId");

                    b.Property<int?>("StartConServiceStatusId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("DicDocumentStatusId");

                    b.HasIndex("FinishConServiceStatusId");

                    b.HasIndex("OnlineRequisitionStatusId");

                    b.HasIndex("ProtectionDocStatusId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RouteId");

                    b.HasIndex("StartConServiceStatusId");

                    b.ToTable("DicRouteStages");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStagePerformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<int>("PositionId");

                    b.Property<int>("RouteStageId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RouteStageId");

                    b.ToTable("DicRouteStagePerformers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicSelectionAchieveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicSelectionAchieveTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicStageExpirationByDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int>("ExpirationType");

                    b.Property<short>("ExpirationValue");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int>("RouteStageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("RouteStageId");

                    b.ToTable("DicStageExpirationByDocTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsCtm");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsMoreThanIcgsThreshold");

                    b.Property<bool?>("IsProtectionDocSupportDateExpired");

                    b.Property<string>("Limit");

                    b.Property<int?>("MaintenanceYears");

                    b.Property<string>("NameEn")
                        .HasMaxLength(4000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(4000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(4000);

                    b.Property<int?>("NiisTariffId");

                    b.Property<decimal?>("Price");

                    b.Property<decimal?>("PriceBeneficiary");

                    b.Property<decimal?>("PriceBusiness");

                    b.Property<decimal?>("PriceFl");

                    b.Property<decimal?>("PriceUl");

                    b.Property<int?>("ProtectionDocSupportYearsFrom");

                    b.Property<int?>("ProtectionDocSupportYearsUntil");

                    b.Property<int>("ReceiveTypeGroup");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NiisTariffId");

                    b.ToTable("DicTariffs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicTariffProtectionDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int>("ProtectionDocTypeId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocTypeId");

                    b.HasIndex("TariffId");

                    b.ToTable("DicTariffProtectionDocTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicTypeTrademark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DicTypeTrademarks");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int?>("ContinentId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LocationId");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<string>("PostCode");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocationId");

                    b.ToTable("DicAddresses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicContinent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DicContinents");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int?>("ContinentId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("ParentId");

                    b.ToTable("DicCountries");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEn")
                        .HasMaxLength(2000);

                    b.Property<string>("NameKz")
                        .HasMaxLength(2000);

                    b.Property<string>("NameRu")
                        .HasMaxLength(2000);

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<string>("StatId");

                    b.Property<string>("StatParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("DicLocations");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("BucketName");

                    b.Property<string>("ContentType");

                    b.Property<int?>("CopyCount");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("FileUrl");

                    b.Property<string>("Hash");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<long>("Length");

                    b.Property<string>("OriginalName");

                    b.Property<int?>("PageCount");

                    b.Property<int?>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ValidName");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddresseeAddress");

                    b.Property<int?>("AddresseeId");

                    b.Property<int?>("AttachedPaymentsCount");

                    b.Property<int>("Barcode");

                    b.Property<int?>("BulletinId");

                    b.Property<DateTimeOffset?>("ControlDate");

                    b.Property<bool?>("ControlMark");

                    b.Property<int?>("CopyCount");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateOutOfControl");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("DocumentNum");

                    b.Property<byte>("DocumentType");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("IncomingAnswerId");

                    b.Property<string>("IncomingDocumentNumber");

                    b.Property<string>("IncomingNumber");

                    b.Property<string>("IncomingNumberFilial");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsFinished");

                    b.Property<bool?>("IsHasPaymentDocument");

                    b.Property<int?>("MainAttachmentId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberForPayment");

                    b.Property<bool?>("OutOfControl");

                    b.Property<string>("OutgoingNumber");

                    b.Property<int?>("PageCount");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int?>("PaymentInvoiceId");

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<string>("ResolutionExtensionControlDate");

                    b.Property<int?>("SendTypeId");

                    b.Property<DateTimeOffset?>("SendingDate");

                    b.Property<int?>("StatusId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TrackNumber");

                    b.Property<int>("TypeId");

                    b.Property<bool>("WasScanned");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("BulletinId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("IncomingAnswerId");

                    b.HasIndex("MainAttachmentId")
                        .IsUnique()
                        .HasFilter("[MainAttachmentId] IS NOT NULL");

                    b.HasIndex("PaymentInvoiceId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.HasIndex("ReceiveTypeId");

                    b.HasIndex("SendTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("DocumentComments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("DocumentContents");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<int?>("CustomerId");

                    b.Property<int>("CustomerRoleId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsMention");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Document_Customer");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentEarlyReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int>("EarlyRegTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameSD");

                    b.Property<DateTimeOffset?>("PriorityDate");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<string>("StageSD");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EarlyRegTypeId");

                    b.ToTable("DocumentEarlyRegs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentExecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentExecutors");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildDocumentId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ParentDocumentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ChildDocumentId");

                    b.HasIndex("ParentDocumentId");

                    b.ToTable("DocumentLinks");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentNotificationStatus", b =>
                {
                    b.Property<int>("DocumentId");

                    b.Property<int>("NotificationStatusId");

                    b.HasKey("DocumentId", "NotificationStatusId");

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("DocumentsNotificationStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("DocumentTicketNumber");

                    b.Property<decimal?>("DocumentWeigth");

                    b.Property<int?>("ExternalId");

                    b.Property<decimal?>("SendAmount");

                    b.Property<int?>("SendTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("SendTypeId");

                    b.ToTable("DocumentProperties");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentUserInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserInput");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentUserInputs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentUserSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsValidCertificate");

                    b.Property<string>("PlainData");

                    b.Property<string>("SignatureError");

                    b.Property<string>("SignedData");

                    b.Property<string>("SignerCertificate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId")
                        .IsUnique();

                    b.ToTable("DocumentUserSignatures");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ControlDate");

                    b.Property<int?>("CurrentStageId");

                    b.Property<int?>("CurrentUserId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateReceived");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FromStageId");

                    b.Property<int?>("FromUserId");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsCurent");

                    b.Property<bool>("IsMain");

                    b.Property<bool?>("IsSystem");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("PreviousWorkflowId");

                    b.Property<int?>("RouteId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RouteId");

                    b.ToTable("DocumentWorkflows");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentWorkflowViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentWorkflowId");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentWorkflowId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentWorkflowViewers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ExpertSearchViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<int>("OwnerType")
                        .HasColumnName("OwnerType");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<int>("ProtectionDocTypeId")
                        .HasColumnName("ProtectionDocTypeId");

                    b.Property<int?>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RequestId");

                    b.ToTable("ExpertSearchView");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateProcess");

                    b.Property<int>("DocumentId");

                    b.Property<string>("PackageData");

                    b.Property<string>("ProcessError");

                    b.Property<int>("StateId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeId");

                    b.ToTable("IntegrationConPackages");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackageState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("IntegrationConPackageStates");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("IntegrationConPackageTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationConServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("IntegrationConServiceStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset?>("DateSent");

                    b.Property<int>("DocumentBarcode");

                    b.Property<int>("DocumentTypeId");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName");

                    b.Property<DateTimeOffset?>("InOutDate");

                    b.Property<string>("InOutNumber");

                    b.Property<string>("Note");

                    b.Property<int>("RequestBarcode");

                    b.HasKey("Id");

                    b.ToTable("IntegrationDocuments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationEGovPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PayCode");

                    b.Property<DateTimeOffset?>("PayDate");

                    b.Property<decimal?>("PaySum");

                    b.Property<string>("PayXin");

                    b.Property<string>("PayXml");

                    b.Property<int>("RequestBarcode");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEGovPays");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationLogRefList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Note");

                    b.Property<string>("RefName")
                        .IsRequired();

                    b.Property<string>("SqLquery")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("IntegrationLogRefLists");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationNiisRefTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ParentId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<decimal?>("ValueBiz");

                    b.Property<decimal?>("ValueFiz");

                    b.Property<decimal?>("ValueFizBenefit");

                    b.Property<decimal?>("ValueFull");

                    b.Property<decimal?>("ValueJur");

                    b.HasKey("Id");

                    b.ToTable("IntegrationNiisRefTariffs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationPaymentCalc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorId");

                    b.Property<string>("CountName");

                    b.Property<int?>("MinCount");

                    b.Property<int>("PatentType");

                    b.Property<int>("TariffId");

                    b.HasKey("Id");

                    b.ToTable("IntegrationPaymentCalcs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationRequisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Callback");

                    b.Property<string>("ChainId");

                    b.Property<DateTimeOffset>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsCallbackProcessed");

                    b.Property<string>("Note");

                    b.Property<int>("OnlineRequisitionStatusId");

                    b.Property<int>("ProtectionDocTypeId");

                    b.Property<int>("RequestBarcode");

                    b.Property<string>("RequestNumber")
                        .IsRequired();

                    b.Property<string>("Sender")
                        .IsRequired();

                    b.Property<string>("StatusURL");

                    b.Property<string>("Xml");

                    b.HasKey("Id");

                    b.HasIndex("OnlineRequisitionStatusId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.ToTable("IntegrationRequisitions");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationRomarinFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<string>("Status");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("IntegrationRomarinFiles");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationRomarinLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties")
                        .HasColumnType("xml");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("IntegrationRomarinLog");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<DateTimeOffset>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset?>("DateSent");

                    b.Property<string>("Note");

                    b.Property<int>("OnlineRequisitionStatusId");

                    b.Property<int>("RequestBarcode");

                    b.HasKey("Id");

                    b.HasIndex("OnlineRequisitionStatusId");

                    b.ToTable("IntegrationStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName");

                    b.Property<DateTimeOffset?>("GosDate");

                    b.Property<string>("GosNumber");

                    b.Property<string>("Identifier")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<DateTimeOffset?>("ReqDate");

                    b.Property<string>("ReqNumber");

                    b.Property<int>("RequestId");

                    b.Property<string>("Xin")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.IntellectualProperty.IntellectualProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abstract");

                    b.Property<string>("AdditionalInfo");

                    b.Property<int>("AddressId");

                    b.Property<int>("ApplicantTypeId");

                    b.Property<string>("Attorney");

                    b.Property<DateTimeOffset?>("BulletinDate")
                        .IsRequired();

                    b.Property<string>("Code");

                    b.Property<string>("Confidant");

                    b.Property<int?>("ConventionTypeId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("DeclaredName")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset?>("EarlyTerminationDate");

                    b.Property<DateTimeOffset>("ExtensionDate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("FirstPubInfo");

                    b.Property<string>("GosNumber");

                    b.Property<int?>("ImageId");

                    b.Property<DateTimeOffset>("IssuePatentDate");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberApxWork");

                    b.Property<string>("NumberBulletin");

                    b.Property<string>("NumberCopyrightCertificate");

                    b.Property<string>("PaperworkStateRegister");

                    b.Property<string>("Patentee");

                    b.Property<int?>("ProtectionDocSubTypeId");

                    b.Property<DateTimeOffset?>("RecoveryPetitionDate");

                    b.Property<string>("RefusalToPublish");

                    b.Property<int>("RequestId");

                    b.Property<int>("StatusId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Transliteration");

                    b.Property<int>("TypeId");

                    b.Property<DateTimeOffset>("ValidDate");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("ConventionTypeId");

                    b.HasIndex("ProtectionDocSubTypeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("IntellectualProperties");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractProtectionDocRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("Contract_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractRequestRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("RequestId");

                    b.ToTable("Contract_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicBiblioChangeTypeDicRouteStageRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChangeTypeId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("StageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("StageId");

                    b.ToTable("DicBiblioChangeTypeDicRouteStageRelations");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicColorTZProtectionDocRelation", b =>
                {
                    b.Property<int>("ColorTzId");

                    b.Property<int>("ProtectionDocId");

                    b.HasKey("ColorTzId", "ProtectionDocId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("DicColorTZ_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicColorTZRequestRelation", b =>
                {
                    b.Property<int>("ColorTzId");

                    b.Property<int>("RequestId");

                    b.HasKey("ColorTzId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("DicColorTZ_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicDocumentTypeDicProtectionDocTypeRelation", b =>
                {
                    b.Property<int>("DicDocumentTypeId");

                    b.Property<int>("DicProtectionDocTypeId");

                    b.HasKey("DicDocumentTypeId", "DicProtectionDocTypeId");

                    b.HasIndex("DicProtectionDocTypeId");

                    b.ToTable("DicDocumentTypesDicProtectionDocTypes");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicIcfemProtectionDocRelation", b =>
                {
                    b.Property<int>("DicIcfemId");

                    b.Property<int>("ProtectionDocId");

                    b.HasKey("DicIcfemId", "ProtectionDocId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("DicIcfem_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicIcfemRequestRelation", b =>
                {
                    b.Property<int>("DicIcfemId");

                    b.Property<int>("RequestId");

                    b.HasKey("DicIcfemId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("DicIcfem_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DocumentDocumentRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsAnswer");

                    b.Property<int>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("DocumentDocumentRelations");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ProtectionDocBulletinRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BulletinId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsPublish");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BulletinId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ProtectionDoc_Bulletin");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ProtectionDocProtectionDocRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProtectionDoc_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RequestRequestRelation", b =>
                {
                    b.Property<int>("ChildId");

                    b.Property<int>("ParentId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("Id");

                    b.Property<bool?>("IsAnswer");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ChildId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Request_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RoleProtectionDocTypeRelation", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("ProtectionDocTypeId");

                    b.HasKey("RoleId", "ProtectionDocTypeId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.ToTable("Role_ProtectionDocType");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RoleRouteStageRelation", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("StageId");

                    b.HasKey("RoleId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("Role_RouteStage");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserIcgsRelation", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IcgsId");

                    b.HasKey("UserId", "IcgsId");

                    b.HasIndex("IcgsId");

                    b.ToTable("AspNetUserICGSs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserIpcRelation", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IpcId");

                    b.HasKey("UserId", "IpcId");

                    b.HasIndex("IpcId");

                    b.ToTable("AspNetUserIpcs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserRouteStageRelation", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("StageId");

                    b.HasKey("UserId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("User_RouteStage");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Notification.NotificationTaskQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Attachment");

                    b.Property<int?>("ConditionStageId");

                    b.Property<int?>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("DicCustomerId");

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsExecuted");

                    b.Property<bool>("IsSms");

                    b.Property<string>("Message");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<int?>("RequestId");

                    b.Property<DateTimeOffset>("ResolveDate");

                    b.Property<string>("Subject");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ConditionStageId");

                    b.HasIndex("ContractId");

                    b.HasIndex("DicCustomerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RequestId");

                    b.ToTable("NotificationTaskQueues");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.AvailabilityCorrespondence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ProtectionDocTypeId");

                    b.Property<int>("RouteStageId");

                    b.Property<int>("Status");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.HasIndex("RouteStageId");

                    b.ToTable("AvailabilityCorrespondences");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.GeneratedQueryExpDep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("DepartmentCode");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("Index");

                    b.Property<string>("Number");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("GeneratedQueryExpDeps");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.LogRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("LogErrorType");

                    b.Property<int>("LogType");

                    b.Property<string>("Message");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LogRecord");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.ProtectionDocAttorney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTimeOffset>("CertificateDate");

                    b.Property<string>("CertificateNumber");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Job");

                    b.Property<string>("KnowledgeArea");

                    b.Property<string>("Language");

                    b.Property<int?>("LocationId");

                    b.Property<string>("NameFirst");

                    b.Property<string>("NameLast");

                    b.Property<string>("NameMiddle");

                    b.Property<string>("OPS");

                    b.Property<string>("Phone");

                    b.Property<string>("RevalidNote");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("WebSite");

                    b.Property<string>("XIN");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("ProtectionDocAttorneys");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<int?>("TemplateDataFileId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.RouteStageOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClassificationId");

                    b.Property<int>("CurrentStageId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsAutomatic");

                    b.Property<bool>("IsParallel");

                    b.Property<bool>("IsReturn");

                    b.Property<int>("NextStageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("NextStageId");

                    b.ToTable("RouteStageOrders");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.Signature", b =>
                {
                    b.Property<int?>("UserId");

                    b.Property<DateTimeOffset?>("DateCreate");

                    b.Property<DateTimeOffset>("DateFrom");

                    b.Property<DateTimeOffset>("DateTo");

                    b.Property<DateTimeOffset?>("DateUpdate");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileFingerPrint");

                    b.Property<string>("FileName");

                    b.Property<long>("FileSize");

                    b.Property<string>("FileType");

                    b.Property<string>("Note");

                    b.HasKey("UserId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount");

                    b.Property<string>("AssignmentDescription");

                    b.Property<decimal?>("BlockedAmount");

                    b.Property<DateTimeOffset?>("BlockedDate");

                    b.Property<string>("BlockedReason");

                    b.Property<decimal?>("CashBalance");

                    b.Property<decimal?>("CurrencyAmount");

                    b.Property<decimal?>("CurrencyRate");

                    b.Property<string>("CurrencyType");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("EmployeeNameBlockedPayment");

                    b.Property<string>("EmployeeNameReturnedPayment");

                    b.Property<int?>("ExternalId");

                    b.Property<DateTimeOffset?>("ImportedDate");

                    b.Property<bool>("IsAdvancePayment");

                    b.Property<bool>("IsForeignCurrency");

                    b.Property<bool?>("IsPrePayment");

                    b.Property<string>("Payer");

                    b.Property<string>("PayerBinOrInn")
                        .HasMaxLength(12);

                    b.Property<string>("PayerRNN")
                        .HasMaxLength(12);

                    b.Property<string>("Payment1CNumber");

                    b.Property<string>("PaymentCNumberBVU");

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<string>("PaymentNumber");

                    b.Property<int?>("PaymentStatusId");

                    b.Property<decimal?>("PaymentUseAmmountSumm");

                    b.Property<string>("PurposeDescription");

                    b.Property<decimal?>("ReturnedAmount");

                    b.Property<DateTimeOffset?>("ReturnedDate");

                    b.Property<string>("ReturnedReason");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserImportedId");

                    b.Property<string>("UserNameImported");

                    b.Property<string>("UserPositionImported");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserImportedId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("PaymentCharges");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentExecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsCharged")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("RequestId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentExecutors");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicantTypeId");

                    b.Property<decimal>("Coefficient");

                    b.Property<int?>("ContractId");

                    b.Property<int?>("CreateUserId");

                    b.Property<DateTimeOffset?>("DateComplete");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateExportedTo1C");

                    b.Property<DateTimeOffset?>("DateFact");

                    b.Property<DateTimeOffset?>("DateOfChangingChargedPaymentInvoice");

                    b.Property<DateTimeOffset?>("DateOfDeletingChargedPaymentInvoice");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("EmployeeAndPositonWhoChangedChargedPaymentInvoice");

                    b.Property<string>("EmployeeAndPositonWhoDeleteChargedPaymentInvoice");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Nds");

                    b.Property<DateTimeOffset?>("OverdueDate");

                    b.Property<decimal>("PenaltyPercent");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<string>("ReasonOfChangingChargedPaymentInvoice");

                    b.Property<string>("ReasonOfDeletingChargedPaymentInvoice");

                    b.Property<int?>("RequestId");

                    b.Property<int>("StatusId");

                    b.Property<int?>("TariffCount");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("WhoBoundUserId");

                    b.Property<int?>("WriteOffUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TariffId");

                    b.HasIndex("WhoBoundUserId");

                    b.HasIndex("WriteOffUserId");

                    b.ToTable("PaymentInvoices");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentRegistryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("PaymentInvoiceId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PaymentInvoiceId");

                    b.ToTable("PaymentRegistryDatas");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("BlockedAmount");

                    b.Property<string>("BlockedAmountEmployeeName");

                    b.Property<string>("BlockedAmountReason");

                    b.Property<int?>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateOfPayment");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset?>("DeletionClearedPaymentDate");

                    b.Property<string>("DeletionClearedPaymentEmployeeName");

                    b.Property<string>("DeletionClearedPaymentReason");

                    b.Property<string>("Description");

                    b.Property<int?>("DicProtectionDocSubTypeId");

                    b.Property<int?>("DicProtectionDocTypeId");

                    b.Property<int?>("DicTariffId");

                    b.Property<DateTimeOffset?>("EditClearedPaymentDate");

                    b.Property<string>("EditClearedPaymentEmployeeName");

                    b.Property<string>("EditClearedPaymentReason");

                    b.Property<string>("EmployeeCheckoutPaymentName");

                    b.Property<string>("EmployeeWriteOffPaymentName");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("IssuingPaymentDate");

                    b.Property<string>("Payer");

                    b.Property<string>("PayerBinOrInn");

                    b.Property<int?>("PaymentId");

                    b.Property<int?>("PaymentInvoiceId");

                    b.Property<DateTimeOffset?>("PaymentUseDate");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<int?>("RequestId");

                    b.Property<string>("ReturnAmountEmployeeName");

                    b.Property<string>("ReturnAmountReason");

                    b.Property<decimal>("ReturnedAmount");

                    b.Property<DateTimeOffset?>("ReturnedAmountDate");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DicProtectionDocSubTypeId");

                    b.HasIndex("DicProtectionDocTypeId");

                    b.HasIndex("DicTariffId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentInvoiceId");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RequestId");

                    b.ToTable("PaymentUses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.RequiredPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("StageId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.HasIndex("TariffId");

                    b.ToTable("RequiredPayments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ICGSProtectionDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimedDescription");

                    b.Property<string>("ClaimedDescriptionEn");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionKz");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IcgsId");

                    b.Property<bool?>("IsNegative");

                    b.Property<bool?>("IsNegativePartial");

                    b.Property<bool?>("IsPartialRefused");

                    b.Property<bool?>("IsRefused");

                    b.Property<string>("NegativeDescription");

                    b.Property<int>("ProtectionDocId");

                    b.Property<string>("ReasonForPartialRefused");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IcgsId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ICGS_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ICISProtectionDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IcisId");

                    b.Property<string>("ImportedDate");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IcisId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ICIS_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.IPCProtectionDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IpcId");

                    b.Property<bool>("IsMain");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IpcId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("IPC_ProtectionDoc");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<int?>("AddresseeId");

                    b.Property<int?>("ApplicantTypeId");

                    b.Property<int>("Barcode");

                    b.Property<int?>("BeneficiaryTypeId");

                    b.Property<int?>("BulletinUserId");

                    b.Property<string>("Code");

                    b.Property<string>("Code60");

                    b.Property<string>("ColectiveTrademarkParticipantsInfo");

                    b.Property<int?>("ConsiderationTypeId");

                    b.Property<int?>("ConventionTypeId");

                    b.Property<bool?>("CopyrightAuthor");

                    b.Property<bool?>("CopyrightEmployer");

                    b.Property<int?>("CurrentWorkflowId");

                    b.Property<string>("DataInitialPublication");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateOfCreation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<bool?>("DeclarantEmployer");

                    b.Property<string>("Description");

                    b.Property<string>("DisclaimerKz");

                    b.Property<string>("DisclaimerRu");

                    b.Property<DateTimeOffset?>("EarlyTerminationDate");

                    b.Property<DateTimeOffset?>("ExtensionDate");

                    b.Property<DateTimeOffset?>("ExtensionDateTz");

                    b.Property<int?>("ExternalId");

                    b.Property<DateTimeOffset?>("GosDate");

                    b.Property<string>("GosNumber");

                    b.Property<string>("Gosreestr");

                    b.Property<byte[]>("Image");

                    b.Property<int?>("ImageId");

                    b.Property<int?>("IntellectualPropertyId");

                    b.Property<bool>("IsImageFromName");

                    b.Property<string>("IsMainIpcs");

                    b.Property<string>("LicenseInfo");

                    b.Property<string>("LicenseInfoStateRegister");

                    b.Property<DateTimeOffset?>("MaintainDate");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberApxWork");

                    b.Property<string>("NumberCopyrightCertificate");

                    b.Property<string>("OtherDocuments");

                    b.Property<bool?>("Otkaz");

                    b.Property<DateTimeOffset?>("OutgoingDate");

                    b.Property<string>("OutgoingNumber");

                    b.Property<string>("OutgoingNumberFilial");

                    b.Property<int?>("PageCount");

                    b.Property<string>("PaperworkStateRegister");

                    b.Property<byte[]>("PreviewImage");

                    b.Property<int?>("ProtectionDocInfoId");

                    b.Property<DateTimeOffset?>("ProxyForDate");

                    b.Property<DateTimeOffset?>("ProxyWithDate");

                    b.Property<DateTimeOffset?>("PublicDate");

                    b.Property<DateTimeOffset?>("PublishDate");

                    b.Property<DateTimeOffset?>("RecoveryPetitionDate");

                    b.Property<string>("Referat");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<string>("RejectionReason");

                    b.Property<int?>("RequestId");

                    b.Property<int?>("SelectionAchieveTypeId");

                    b.Property<string>("SelectionFamily");

                    b.Property<string>("SelectionNameOffer");

                    b.Property<int?>("SendTypeId");

                    b.Property<int?>("SmallImageId");

                    b.Property<int?>("SpeciesTradeMarkId");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("SubTypeId");

                    b.Property<int?>("SupportUserId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ToPm");

                    b.Property<DateTimeOffset?>("TransferDate");

                    b.Property<string>("Translation");

                    b.Property<string>("Transliteration");

                    b.Property<int>("TypeId");

                    b.Property<int?>("TypeTrademarkId");

                    b.Property<DateTimeOffset?>("ValidDate");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("BulletinUserId");

                    b.HasIndex("ConsiderationTypeId");

                    b.HasIndex("ConventionTypeId");

                    b.HasIndex("CurrentWorkflowId");

                    b.HasIndex("IntellectualPropertyId")
                        .IsUnique()
                        .HasFilter("[IntellectualPropertyId] IS NOT NULL");

                    b.HasIndex("RequestId");

                    b.HasIndex("SelectionAchieveTypeId");

                    b.HasIndex("SendTypeId");

                    b.HasIndex("SpeciesTradeMarkId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("TypeId");

                    b.HasIndex("TypeTrademarkId");

                    b.ToTable("ProtectionDocs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocConventionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateEurasianApp");

                    b.Property<DateTimeOffset?>("DateInternationalApp");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("EarlyRegTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("HeadIps");

                    b.Property<DateTimeOffset?>("InternationalAppToNationalPhaseTransferDate");

                    b.Property<int>("ProtectionDocId");

                    b.Property<DateTimeOffset?>("PublishDateEurasianApp");

                    b.Property<DateTimeOffset?>("PublishDateInternationalApp");

                    b.Property<string>("PublishRegNumberEurasianApp");

                    b.Property<string>("PublishRegNumberInternationalApp");

                    b.Property<string>("RegNumberEurasianApp");

                    b.Property<string>("RegNumberInternationalApp");

                    b.Property<DateTimeOffset?>("TermNationalPhaseFirsChapter");

                    b.Property<DateTimeOffset?>("TermNationalPhaseSecondChapter");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EarlyRegTypeId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ProtectionDocConventionInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressEn");

                    b.Property<string>("AddressKz");

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("CustomerRoleId");

                    b.Property<DateTimeOffset?>("DateBegin");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Email");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneFax");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ProtectionDocCustomers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProtectionDocId");

                    b.ToTable("ProtectionDocDocuments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocEarlyReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateF1");

                    b.Property<DateTimeOffset?>("DateF2");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int>("EarlyRegTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("NameSD");

                    b.Property<int?>("PCTType");

                    b.Property<DateTimeOffset?>("PriorityDate");

                    b.Property<int>("ProtectionDocId");

                    b.Property<int?>("RegCountryId");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EarlyRegTypeId");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RegCountryId");

                    b.ToTable("ProtectionDocEarlyRegs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AcceptAgreement");

                    b.Property<string>("Breed");

                    b.Property<int?>("BreedCountryId");

                    b.Property<string>("BreedingNumber");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("FlagHeirship");

                    b.Property<bool>("FlagNine");

                    b.Property<bool>("FlagTat");

                    b.Property<bool>("FlagTpt");

                    b.Property<bool>("FlagTth");

                    b.Property<bool>("FlagTtw");

                    b.Property<string>("Genus");

                    b.Property<bool?>("IsColorPerformance");

                    b.Property<bool?>("IsConventionPriority");

                    b.Property<bool?>("IsExhibitPriority");

                    b.Property<bool?>("IsStandardFont");

                    b.Property<bool?>("IsVolumeTZ");

                    b.Property<bool?>("IzCollectiveTZ");

                    b.Property<string>("Priority");

                    b.Property<string>("ProductPlace");

                    b.Property<string>("ProductSpecialProp");

                    b.Property<string>("ProductType");

                    b.Property<int>("ProtectionDocId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Translation");

                    b.Property<string>("Transliteration");

                    b.HasKey("Id");

                    b.HasIndex("BreedCountryId");

                    b.HasIndex("ProtectionDocId")
                        .IsUnique();

                    b.ToTable("ProtectionDocInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocRedefine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionKz");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ProtectionDocId");

                    b.Property<DateTimeOffset?>("RedefinitionDate");

                    b.Property<int?>("RedefinitionTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RedefinitionTypeId");

                    b.ToTable("ProtectionDocRedefines");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ControlDate");

                    b.Property<int?>("CurrentStageId");

                    b.Property<int?>("CurrentUserId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateReceived");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FromStageId");

                    b.Property<int?>("FromUserId");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsMain");

                    b.Property<bool?>("IsSystem");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("PreviousWorkflowId");

                    b.Property<int?>("RouteId");

                    b.Property<int?>("SecondaryCurrentUserId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SecondaryCurrentUserId");

                    b.ToTable("ProtectionDocWorkflows");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.AdditionalDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("GazetteReference");

                    b.Property<DateTimeOffset?>("IntRegisterEffectiveDate");

                    b.Property<DateTimeOffset?>("IntRegisterRegnDate");

                    b.Property<DateTimeOffset?>("NotificationDate");

                    b.Property<int?>("OfficeOfOriginCountryId");

                    b.Property<DateTimeOffset?>("PublicationDate");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("OfficeOfOriginCountryId");

                    b.HasIndex("RequestId");

                    b.ToTable("AdditionalDocs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ExpertSearchSimilar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("ImageSimilarity");

                    b.Property<int>("OwnerType");

                    b.Property<int>("PhonSimilarity");

                    b.Property<string>("ProtectionDocCategory");

                    b.Property<string>("ProtectionDocFormula");

                    b.Property<int>("RequestId");

                    b.Property<int>("SemSimilarity");

                    b.Property<int?>("SimilarProtectionDocId");

                    b.Property<int?>("SimilarRequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("SimilarProtectionDocId");

                    b.HasIndex("SimilarRequestId");

                    b.ToTable("ExpertSearchSimilarities");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ICGSRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimedDescription");

                    b.Property<string>("ClaimedDescriptionEn");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionKz");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IcgsId");

                    b.Property<bool?>("IsHistory");

                    b.Property<bool?>("IsNegative");

                    b.Property<bool?>("IsNegativePartial");

                    b.Property<bool?>("IsPartialRefused");

                    b.Property<bool?>("IsRefused");

                    b.Property<string>("NegativeDescription");

                    b.Property<string>("ReasonForPartialRefused");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IcgsId");

                    b.HasIndex("RequestId");

                    b.ToTable("ICGS_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ICISRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IcisId");

                    b.Property<string>("ImportedDate");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IcisId");

                    b.HasIndex("RequestId");

                    b.ToTable("ICIS_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.IPCRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("IpcId");

                    b.Property<bool>("IsMain");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IpcId");

                    b.HasIndex("RequestId");

                    b.ToTable("IPC_Request");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddresseeAddress");

                    b.Property<int?>("AddresseeId");

                    b.Property<int?>("ApplicantTypeId");

                    b.Property<int>("Barcode");

                    b.Property<int?>("BeneficiaryTypeId");

                    b.Property<string>("Code");

                    b.Property<double?>("CoefficientComplexity");

                    b.Property<string>("ColectiveTrademarkParticipantsInfo");

                    b.Property<int?>("ConventionTypeId");

                    b.Property<int?>("CopyCount");

                    b.Property<int?>("CountIndependentItems");

                    b.Property<int?>("CurrentWorkflowId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateRecognizedKnown");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("DisclaimerEn");

                    b.Property<string>("DisclaimerKz");

                    b.Property<string>("DisclaimerRu");

                    b.Property<DateTimeOffset?>("DistributionDate");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("ExpertSearchKeywords");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FlDivisionId");

                    b.Property<byte[]>("Image");

                    b.Property<string>("IncomingNumber");

                    b.Property<string>("IncomingNumberFilial");

                    b.Property<string>("InfoConfirmKnownTrademark");

                    b.Property<string>("InfoDecisionToRecognizedKnown");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsDocSendToEmail");

                    b.Property<bool?>("IsFormalExamFeeNotPaidInTime");

                    b.Property<bool>("IsImageFromName");

                    b.Property<bool?>("IsOnChangeScenario");

                    b.Property<bool>("IsRead");

                    b.Property<bool?>("IsRejected");

                    b.Property<int?>("MainAttachmentId");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberBulletin");

                    b.Property<DateTimeOffset?>("OutgoingDate");

                    b.Property<string>("OutgoingNumber");

                    b.Property<string>("OutgoingNumberFilial");

                    b.Property<int?>("PageCount");

                    b.Property<byte[]>("PreviewImage");

                    b.Property<string>("ProductPlace");

                    b.Property<int>("ProtectionDocTypeId");

                    b.Property<DateTimeOffset?>("PublicDate");

                    b.Property<DateTimeOffset?>("PublishDate");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<string>("Referat");

                    b.Property<string>("RejectionReason");

                    b.Property<DateTimeOffset?>("RequestDate");

                    b.Property<int?>("RequestInfoId");

                    b.Property<string>("RequestNum");

                    b.Property<int?>("RequestTypeId");

                    b.Property<bool?>("RequiresPaymentExecutor");

                    b.Property<string>("RomarinColor");

                    b.Property<int?>("ScanFileId");

                    b.Property<int?>("SelectionAchieveTypeId");

                    b.Property<string>("SelectionFamily");

                    b.Property<int?>("SpeciesTradeMarkId");

                    b.Property<int?>("StatusId");

                    b.Property<string>("StatusSending");

                    b.Property<int?>("TemplateDataFileId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("TransferDate");

                    b.Property<string>("Translation");

                    b.Property<string>("Transliteration");

                    b.Property<int?>("TypeTrademarkId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("ConventionTypeId");

                    b.HasIndex("CurrentWorkflowId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("FlDivisionId");

                    b.HasIndex("MainAttachmentId");

                    b.HasIndex("ProtectionDocTypeId");

                    b.HasIndex("ReceiveTypeId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SelectionAchieveTypeId");

                    b.HasIndex("SpeciesTradeMarkId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeTrademarkId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestConventionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateEurasianApp");

                    b.Property<DateTimeOffset?>("DateInternationalApp");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("EarlyRegTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("HeadIps");

                    b.Property<DateTimeOffset?>("InternationalAppToNationalPhaseTransferDate");

                    b.Property<DateTimeOffset?>("PublishDateEurasianApp");

                    b.Property<DateTimeOffset?>("PublishDateInternationalApp");

                    b.Property<string>("PublishRegNumberEurasianApp");

                    b.Property<string>("PublishRegNumberInternationalApp");

                    b.Property<string>("RegNumberEurasianApp");

                    b.Property<string>("RegNumberInternationalApp");

                    b.Property<int>("RequestId");

                    b.Property<DateTimeOffset?>("TermNationalPhaseFirsChapter");

                    b.Property<DateTimeOffset?>("TermNationalPhaseSecondChapter");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EarlyRegTypeId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestConventionInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressEn");

                    b.Property<string>("AddressKz");

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("CustomerRoleId");

                    b.Property<DateTimeOffset?>("DateBegin");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateEnd");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Email");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneFax");

                    b.Property<int?>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCustomers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestsDocuments");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestEarlyReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int>("EarlyRegTypeId");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("ITMRawPriorityData");

                    b.Property<string>("NameSD");

                    b.Property<DateTimeOffset?>("PriorityDate");

                    b.Property<int?>("RegCountryId");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<int>("RequestId");

                    b.Property<string>("StageSD");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EarlyRegTypeId");

                    b.HasIndex("RegCountryId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestEarlyRegs");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AcceptAgreement");

                    b.Property<string>("Breed");

                    b.Property<int?>("BreedCountryId");

                    b.Property<string>("BreedingNumber");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool>("FlagHeirship");

                    b.Property<bool>("FlagNine");

                    b.Property<bool>("FlagTat");

                    b.Property<bool>("FlagTpt");

                    b.Property<bool>("FlagTth");

                    b.Property<bool>("FlagTtw");

                    b.Property<string>("Genus");

                    b.Property<bool?>("IsColorPerformance");

                    b.Property<bool?>("IsConventionPriority");

                    b.Property<bool?>("IsExhibitPriority");

                    b.Property<bool?>("IsStandardFont");

                    b.Property<bool?>("IsVolumeTZ");

                    b.Property<bool?>("IzCollectiveTZ");

                    b.Property<string>("Priority");

                    b.Property<string>("ProductPlace");

                    b.Property<string>("ProductSpecialProp");

                    b.Property<string>("ProductType");

                    b.Property<int>("RequestId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Translation");

                    b.Property<string>("Transliteration");

                    b.HasKey("Id");

                    b.HasIndex("BreedCountryId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("RequestInfos");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestNotificationStatus", b =>
                {
                    b.Property<int>("RequestId");

                    b.Property<int>("NotificationStatusId");

                    b.HasKey("RequestId", "NotificationStatusId");

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("RequestsNotificationStatuses");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestProtectionDocSimilar", b =>
                {
                    b.Property<int>("ProtectionDocId");

                    b.Property<int>("RequestId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.HasKey("ProtectionDocId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestProtectionDocSimilarities");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ControlDate");

                    b.Property<int?>("CurrentStageId");

                    b.Property<int?>("CurrentUserId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset?>("DateReceived");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalId");

                    b.Property<int?>("FromStageId");

                    b.Property<int?>("FromUserId");

                    b.Property<bool?>("IsChangeScenarioEntry");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsMain");

                    b.Property<bool?>("IsSystem");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("PreviousWorkflowId");

                    b.Property<int?>("RouteId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RouteId");

                    b.ToTable("RequestWorkflows");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Rules.PaymentInvoiceChargingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("NextStageId");

                    b.Property<int>("StageId");

                    b.Property<int>("TariffId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NextStageId");

                    b.HasIndex("StageId");

                    b.HasIndex("TariffId");

                    b.ToTable("PaymentInvoiceChargingRules");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.SearchContractViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorNames");

                    b.Property<bool>("AuthorsAreNotMentions");

                    b.Property<string>("AuthorsCertificateNumbers");

                    b.Property<int>("Barcode");

                    b.Property<string>("BreedingNumber");

                    b.Property<string>("ConfidantNames");

                    b.Property<string>("CorrespondenceNames");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<string>("DeclarantNames");

                    b.Property<string>("DisclaimerKz");

                    b.Property<string>("DisclaimerRu");

                    b.Property<int?>("DocTypeId");

                    b.Property<string>("DocTypeName");

                    b.Property<string>("IcfemCodes");

                    b.Property<string>("IcgsCodes");

                    b.Property<string>("IcisCodes");

                    b.Property<byte[]>("Image");

                    b.Property<string>("IncomingNumber");

                    b.Property<string>("IpcCodes");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberBulletin");

                    b.Property<string>("PatentAttorneyNames");

                    b.Property<string>("PatentOwnerNames");

                    b.Property<DateTimeOffset?>("ProtectionDocDate");

                    b.Property<DateTimeOffset?>("ProtectionDocExtensionDate");

                    b.Property<int?>("ProtectionDocMaintainYear");

                    b.Property<string>("ProtectionDocNumber");

                    b.Property<DateTimeOffset?>("ProtectionDocOutgoingDate");

                    b.Property<int?>("ProtectionDocStatusId");

                    b.Property<string>("ProtectionDocStatusName");

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<string>("ProtectionDocTypeName");

                    b.Property<DateTimeOffset?>("ProtectionDocValidDate");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<string>("ReceiveTypeName");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<int?>("RequestStatusId");

                    b.Property<string>("RequestStatusName");

                    b.Property<int?>("RequestSubTypeId");

                    b.Property<string>("RequestSubTypeName");

                    b.Property<int?>("RequestTypeId");

                    b.Property<string>("RequestTypeName");

                    b.Property<int?>("SelectionAchieveTypeId");

                    b.Property<string>("SelectionAchieveTypeName");

                    b.HasKey("Id");

                    b.ToTable("SearchContractsView");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.SearchProtectionDocViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorNames");

                    b.Property<bool>("AuthorsAreNotMentions");

                    b.Property<string>("AuthorsCertificateNumbers");

                    b.Property<int>("Barcode");

                    b.Property<string>("BreedingNumber");

                    b.Property<string>("ConfidantNames");

                    b.Property<string>("CorrespondenceNames");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<string>("DeclarantNames");

                    b.Property<string>("DisclaimerKz");

                    b.Property<string>("DisclaimerRu");

                    b.Property<int?>("DocTypeId");

                    b.Property<string>("DocTypeName");

                    b.Property<string>("IcfemCodes");

                    b.Property<string>("IcgsCodes");

                    b.Property<string>("IcisCodes");

                    b.Property<byte[]>("Image");

                    b.Property<string>("IncomingNumber");

                    b.Property<string>("IpcCodes");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberBulletin");

                    b.Property<string>("PatentAttorneyNames");

                    b.Property<string>("PatentOwnerNames");

                    b.Property<DateTimeOffset?>("ProtectionDocDate");

                    b.Property<DateTimeOffset?>("ProtectionDocExtensionDate");

                    b.Property<int?>("ProtectionDocMaintainYear");

                    b.Property<string>("ProtectionDocNumber");

                    b.Property<DateTimeOffset?>("ProtectionDocOutgoingDate");

                    b.Property<int?>("ProtectionDocStatusId");

                    b.Property<string>("ProtectionDocStatusName");

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<string>("ProtectionDocTypeName");

                    b.Property<DateTimeOffset?>("ProtectionDocValidDate");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<string>("ReceiveTypeName");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<int?>("RequestStatusId");

                    b.Property<string>("RequestStatusName");

                    b.Property<int?>("RequestSubTypeId");

                    b.Property<string>("RequestSubTypeName");

                    b.Property<int?>("RequestTypeId");

                    b.Property<string>("RequestTypeName");

                    b.Property<int?>("SelectionAchieveTypeId");

                    b.Property<string>("SelectionAchieveTypeName");

                    b.HasKey("Id");

                    b.ToTable("SearchProtectionDocsView");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.SearchRequestViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorNames");

                    b.Property<bool>("AuthorsAreNotMentions");

                    b.Property<string>("AuthorsCertificateNumbers");

                    b.Property<int>("Barcode");

                    b.Property<string>("BreedingNumber");

                    b.Property<string>("ConfidantNames");

                    b.Property<string>("CorrespondenceNames");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<string>("DeclarantNames");

                    b.Property<string>("DisclaimerKz");

                    b.Property<string>("DisclaimerRu");

                    b.Property<int?>("DocTypeId");

                    b.Property<string>("DocTypeName");

                    b.Property<string>("IcfemCodes");

                    b.Property<string>("IcgsCodes");

                    b.Property<string>("IcisCodes");

                    b.Property<byte[]>("Image");

                    b.Property<string>("IncomingNumber");

                    b.Property<string>("IpcCodes");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NumberBulletin");

                    b.Property<string>("PatentAttorneyNames");

                    b.Property<string>("PatentOwnerNames");

                    b.Property<DateTimeOffset?>("ProtectionDocDate");

                    b.Property<DateTimeOffset?>("ProtectionDocExtensionDate");

                    b.Property<int?>("ProtectionDocMaintainYear");

                    b.Property<string>("ProtectionDocNumber");

                    b.Property<DateTimeOffset?>("ProtectionDocOutgoingDate");

                    b.Property<int?>("ProtectionDocStatusId");

                    b.Property<string>("ProtectionDocStatusName");

                    b.Property<int?>("ProtectionDocTypeId");

                    b.Property<string>("ProtectionDocTypeName");

                    b.Property<DateTimeOffset?>("ProtectionDocValidDate");

                    b.Property<int?>("ReceiveTypeId");

                    b.Property<string>("ReceiveTypeName");

                    b.Property<DateTimeOffset?>("RegDate");

                    b.Property<string>("RegNumber");

                    b.Property<int?>("RequestStatusId");

                    b.Property<string>("RequestStatusName");

                    b.Property<int?>("RequestSubTypeId");

                    b.Property<string>("RequestSubTypeName");

                    b.Property<int?>("RequestTypeId");

                    b.Property<string>("RequestTypeName");

                    b.Property<int?>("SelectionAchieveTypeId");

                    b.Property<string>("SelectionAchieveTypeName");

                    b.HasKey("Id");

                    b.ToTable("SearchRequestsView");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.SearchViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasColumnName("Address");

                    b.Property<int>("Barcode")
                        .HasColumnName("Barcode");

                    b.Property<int?>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<string>("CountryNameRu")
                        .HasColumnName("CountryNameRu");

                    b.Property<string>("Customer")
                        .HasColumnName("Customer");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<byte?>("DocumentType")
                        .HasColumnName("DocumentType");

                    b.Property<string>("Num")
                        .HasColumnName("Num");

                    b.Property<int>("OwnerType")
                        .HasColumnName("OwnerType");

                    b.Property<int?>("ReceiveTypeId")
                        .HasColumnName("ReceiveTypeId");

                    b.Property<string>("ReceiveTypeNameRu")
                        .HasColumnName("ReceiveTypeNameRu");

                    b.Property<string>("Xin")
                        .HasColumnName("Xin");

                    b.HasKey("Id");

                    b.ToTable("SearchView");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CertPassword");

                    b.Property<string>("CertStoragePath");

                    b.Property<string>("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CustomerId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<int?>("DifficultyPriority");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("IpAddress");

                    b.Property<bool?>("IsArchive");

                    b.Property<bool>("IsVirtual");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MaximumLoad");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("PositionId");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TemplateUserName");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("XIN");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.ClaimConstant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("FieldName");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameKz");

                    b.Property<string>("NameRu");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AspNetClaimConstants");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.DocumentAccessPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicationUserId");

                    b.Property<int>("ClassificationId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("TypeId");

                    b.ToTable("DocumentAccessRoles");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Settings.GridPrintSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("GridName");

                    b.Property<string>("PrintFields");

                    b.Property<string>("PrintItemId");

                    b.Property<int?>("TemplateDataFileId");

                    b.Property<string>("Text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GridPrintSettings");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Settings.SettingGridOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<string>("GridName");

                    b.Property<string>("Options");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SettingGridOptions");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.System.GeneratedInvoiceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<string>("DepartmentCode");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("Index");

                    b.Property<string>("InvoiceNumber");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneratedInvoiceNumbers");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.System.SystemCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Count");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("SystemCounter");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<int>("SettingType");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SettingType")
                        .IsUnique();

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.UsersTasksCountsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveContracts");

                    b.Property<int>("ActiveProtectionDocs");

                    b.Property<int>("ActiveRequests");

                    b.Property<int>("CompletedContracts");

                    b.Property<int>("CompletedDocuments");

                    b.Property<int>("CompletedProtectionDocs");

                    b.Property<int>("CompletedRequests");

                    b.Property<int>("Documents");

                    b.Property<int>("ExpiredContracts");

                    b.Property<int>("ExpiredDocuments");

                    b.Property<int>("ExpiredProtectionDocs");

                    b.Property<int>("ExpiredRequests");

                    b.HasKey("Id");

                    b.ToTable("UsersTasksCountsEntities");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Workflow.WorkflowTaskQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConditionStageId");

                    b.Property<int?>("ContractId");

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<bool?>("IsExecuted");

                    b.Property<int?>("ProtectionDocId");

                    b.Property<int?>("RequestId");

                    b.Property<DateTimeOffset>("ResolveDate");

                    b.Property<int?>("ResultStageId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ConditionStageId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProtectionDocId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ResultStageId");

                    b.ToTable("WorkflowTaskQueues");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.EntitiesFile.DocumentTemplateFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreate");

                    b.Property<DateTimeOffset>("DateUpdate");

                    b.Property<int?>("ExternalId");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileFingerPrint");

                    b.Property<string>("FileName");

                    b.Property<long>("FileSize");

                    b.Property<string>("FileType");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DocumentTemplateFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AccountingData.CustomerAttorneyInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany("CustomerAttorneyInfos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicBeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoNotificationDocumentGeneration.AutoGenerateNotificationDocumentByPetitionAndPaymentRule", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoNotificationDocumentGeneration.AutoGenerateNotificationDocumentByStageRule", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoPaymentInvoiceGeneration.PaymentInvoiceGenerationByPetitionRule", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoPaymentInvoiceGeneration.PaymentInvoiceGenerationRule", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStage", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "NextStage")
                        .WithMany()
                        .HasForeignKey("NextStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStageEvent", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStage")
                        .WithMany("AutoRouteStageEvents")
                        .HasForeignKey("AutoRouteStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStageViewer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AutoRouteStages.AutoRouteStage", "AutoRouteStage")
                        .WithMany("AutoRouteStageViewers")
                        .HasForeignKey("AutoRouteStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.AutoRouteStages.RequestAutoRouteStageExecutor", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.BibliographicData.MadeChange", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicBiblioChangeType", "ChangeType")
                        .WithMany()
                        .HasForeignKey("ChangeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("MadeChanges")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Calendar.Event", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.Contract", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicContractCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.ContractWorkflow", "CurrentWorkflow")
                        .WithMany()
                        .HasForeignKey("CurrentWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "FullExpertiseExecutor")
                        .WithMany()
                        .HasForeignKey("FullExpertiseExecutorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Attachment", "MainAttachment")
                        .WithMany()
                        .HasForeignKey("MainAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicReceiveType", "ReceiveType")
                        .WithMany()
                        .HasForeignKey("ReceiveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicContractStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicContractType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractCustomer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("ContractCustomers")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractDocument", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("Documents")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("Contracts")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractNotificationStatus", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicNotificationStatus", "NotificationStatus")
                        .WithMany("Contracts")
                        .HasForeignKey("NotificationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractProtectionDocICGSProtectionDocRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractProtectionDocRelation", "ContractProtectionDocRelation")
                        .WithMany("ContractProtectionDocICGSProtectionDocs")
                        .HasForeignKey("ContractProtectionDocRelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ICGSProtectionDoc", "ICGSProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ICGSProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractRequestICGSRequestRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractRequestRelation", "ContractRequestRelation")
                        .WithMany("ContractRequestICGSRequests")
                        .HasForeignKey("ContractRequestRelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.ICGSRequest", "ICGSRequest")
                        .WithMany()
                        .HasForeignKey("ICGSRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Contract.ContractWorkflow", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Owner")
                        .WithMany("Workflows")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.ContactInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer")
                        .WithMany("ContactInfos")
                        .HasForeignKey("DicCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicContactInfoType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicConsiderationType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicContractType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "StageOne")
                        .WithMany()
                        .HasForeignKey("StageOneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "StageTwo")
                        .WithMany()
                        .HasForeignKey("StageTwoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicDepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDetailICGS", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICGS", "Icgs")
                        .WithMany("DicDetailIcgss")
                        .HasForeignKey("IcgsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.EntitiesFile.DocumentTemplateFile", "TemplateFile")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("TemplateFileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentTypeGroupType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentTypeGroup", "DocumentTypeGroup")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("DocumentTypeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicEntityAccessType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.DocumentAccessPermissions")
                        .WithMany("AccessTypes")
                        .HasForeignKey("DocumentAccessPermissionsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicICFEM", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICFEM", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicICIS", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICIS", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocStatusRoute", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocStatus", "DicProtectionDocStatus")
                        .WithMany("DicProtectionDocStatusesRoutes")
                        .HasForeignKey("DicProtectionDocStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "DicRoute")
                        .WithMany("DicProtectionDocStatusesRoutes")
                        .HasForeignKey("DicRouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatusRoute", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatus", "DicRequestStatus")
                        .WithMany("DicRequestStatusesRoutes")
                        .HasForeignKey("DicRequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "DicRoute")
                        .WithMany("DicRequestStatusesRoutes")
                        .HasForeignKey("DicRouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRequisitionFeedType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicContractStatus", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentStatus", "DicDocumentStatus")
                        .WithMany()
                        .HasForeignKey("DicDocumentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Integration.IntegrationConServiceStatus", "FinishConServiceStatus")
                        .WithMany()
                        .HasForeignKey("FinishConServiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicOnlineRequisitionStatus", "OnlineRequisitionStatus")
                        .WithMany()
                        .HasForeignKey("OnlineRequisitionStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocStatus", "ProtectionDocStatus")
                        .WithMany()
                        .HasForeignKey("ProtectionDocStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany("RouteStages")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Integration.IntegrationConServiceStatus", "StartConServiceStatus")
                        .WithMany()
                        .HasForeignKey("StartConServiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStagePerformer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "RouteStage")
                        .WithMany()
                        .HasForeignKey("RouteStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicStageExpirationByDocType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "RouteStage")
                        .WithMany("StageExpirationByDocTypes")
                        .HasForeignKey("RouteStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Integration.IntegrationNiisRefTariff", "NiisTariff")
                        .WithMany()
                        .HasForeignKey("NiisTariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.DicTariffProtectionDocType", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany("TariffProtectionDocTypes")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicAddress", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicContinent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicContinent", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicContinent", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicContinent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicLocation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicLocation", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicLocationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.Attachment", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("AdditionalAttachments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("MediaFiles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.Document", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Bulletin.Bulletin", "Bulletin")
                        .WithMany()
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "IncomingAnswer")
                        .WithMany()
                        .HasForeignKey("IncomingAnswerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Attachment", "MainAttachment")
                        .WithOne("MainDocument")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.Document.Document", "MainAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Payment.PaymentInvoice", "PaymentInvoice")
                        .WithMany()
                        .HasForeignKey("PaymentInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicReceiveType", "ReceiveType")
                        .WithMany()
                        .HasForeignKey("ReceiveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicReceiveType", "SendType")
                        .WithMany()
                        .HasForeignKey("SendTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentComment", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.DocumentWorkflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentContent", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithOne("Content")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.Document.DocumentContent", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentCustomer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentEarlyReg", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", "EarlyRegType")
                        .WithMany()
                        .HasForeignKey("EarlyRegTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentExecutor", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentLink", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "ChildDocument")
                        .WithMany("DocumentParentLinks")
                        .HasForeignKey("ChildDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "ParentDocument")
                        .WithMany("DocumentLinks")
                        .HasForeignKey("ParentDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentNotificationStatus", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicNotificationStatus", "NotificationStatus")
                        .WithMany("Documents")
                        .HasForeignKey("NotificationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentProperty", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicSendType", "SendType")
                        .WithMany()
                        .HasForeignKey("SendTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentUserInput", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentUserSignature", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.DocumentWorkflow", "Workflow")
                        .WithOne("DocumentUserSignature")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.Document.DocumentUserSignature", "WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentWorkflow", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Owner")
                        .WithMany("Workflows")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Document.DocumentWorkflowViewer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.DocumentWorkflow", "DocumentWorkflow")
                        .WithMany("DocumentWorkflowViewers")
                        .HasForeignKey("DocumentWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ExpertSearchViewEntity", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackage", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackageState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Integration.IntegrationConPackageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationRequisition", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicOnlineRequisitionStatus", "OnlineRequisitionStatus")
                        .WithMany()
                        .HasForeignKey("OnlineRequisitionStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.IntegrationStatus", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicOnlineRequisitionStatus", "OnlineRequisitionStatus")
                        .WithMany()
                        .HasForeignKey("OnlineRequisitionStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Integration.Statement", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.IntellectualProperty.IntellectualProperty", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicConventionType", "ConventionType")
                        .WithMany()
                        .HasForeignKey("ConventionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "ProtectionDocSubType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicIntellectualPropertyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractProtectionDocRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("ProtectionDocs")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("Contracts")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ContractRequestRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("RequestsForProtectionDoc")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("Contracts")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicBiblioChangeTypeDicRouteStageRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicBiblioChangeType", "ChangeType")
                        .WithMany("Stages")
                        .HasForeignKey("ChangeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany("ChangeTypes")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicColorTZProtectionDocRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicColorTZ", "ColorTz")
                        .WithMany()
                        .HasForeignKey("ColorTzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("ColorTzs")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicColorTZRequestRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicColorTZ", "ColorTz")
                        .WithMany()
                        .HasForeignKey("ColorTzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("ColorTzs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicDocumentTypeDicProtectionDocTypeRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "DicDocumentType")
                        .WithMany("DicProtectionDocTypes")
                        .HasForeignKey("DicDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "DicProtectionDocType")
                        .WithMany("DicDocumentTypes")
                        .HasForeignKey("DicProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicIcfemProtectionDocRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICFEM", "DicIcfem")
                        .WithMany()
                        .HasForeignKey("DicIcfemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("Icfems")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DicIcfemRequestRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICFEM", "DicIcfem")
                        .WithMany()
                        .HasForeignKey("DicIcfemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("Icfems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.DocumentDocumentRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ProtectionDocBulletinRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Bulletin.Bulletin", "Bulletin")
                        .WithMany("ProtectionDocs")
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("Bulletins")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.ProtectionDocProtectionDocRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "Child")
                        .WithMany("Parents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RequestRequestRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Child")
                        .WithMany("ParentRequests")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Parent")
                        .WithMany("ChildsRequests")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RoleProtectionDocTypeRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationRole", "Role")
                        .WithMany("ProtectionDocTypes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.RoleRouteStageRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationRole", "Role")
                        .WithMany("Stages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserIcgsRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICGS", "Icgs")
                        .WithMany()
                        .HasForeignKey("IcgsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany("Icgss")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserIpcRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", "Ipc")
                        .WithMany()
                        .HasForeignKey("IpcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany("Ipcs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ManyToManyMappingEntities.UserRouteStageRelation", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany("Stages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Notification.NotificationTaskQueue", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "ConditionStage")
                        .WithMany()
                        .HasForeignKey("ConditionStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "DicCustomer")
                        .WithMany()
                        .HasForeignKey("DicCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.AvailabilityCorrespondence", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "RouteStage")
                        .WithMany()
                        .HasForeignKey("RouteStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.GeneratedQueryExpDep", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.LogRecord", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.ProtectionDocAttorney", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.RouteStageOrder", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "NextStage")
                        .WithMany()
                        .HasForeignKey("NextStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Other.Signature", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithOne("Signature")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.Other.Signature", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.Payment", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "UserImported")
                        .WithMany()
                        .HasForeignKey("UserImportedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentCharge", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.RequestWorkflow", "Workflow")
                        .WithMany("PaymentCharges")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentExecutor", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("PaymentExecutors")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentInvoice", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "WhoBoundUser")
                        .WithMany()
                        .HasForeignKey("WhoBoundUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "WriteOffUser")
                        .WithMany()
                        .HasForeignKey("WriteOffUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentRegistryData", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Payment.PaymentInvoice", "PaymentInvoice")
                        .WithMany()
                        .HasForeignKey("PaymentInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.PaymentUse", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "DicProtectionDocSubType")
                        .WithMany()
                        .HasForeignKey("DicProtectionDocSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "DicProtectionDocType")
                        .WithMany()
                        .HasForeignKey("DicProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "DicTariff")
                        .WithMany()
                        .HasForeignKey("DicTariffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Payment.Payment", "Payment")
                        .WithMany("PaymentUses")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Payment.PaymentInvoice", "PaymentInvoice")
                        .WithMany("PaymentUses")
                        .HasForeignKey("PaymentInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Payment.RequiredPayment", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ICGSProtectionDoc", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICGS", "Icgs")
                        .WithMany()
                        .HasForeignKey("IcgsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("IcgsProtectionDocs")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ICISProtectionDoc", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICIS", "Icis")
                        .WithMany()
                        .HasForeignKey("IcisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("IcisProtectionDocs")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.IPCProtectionDoc", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", "Ipc")
                        .WithMany()
                        .HasForeignKey("IpcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("IpcProtectionDocs")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicBeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "BulletinUser")
                        .WithMany()
                        .HasForeignKey("BulletinUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicConsiderationType", "ConsiderationType")
                        .WithMany()
                        .HasForeignKey("ConsiderationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicConventionType", "ConventionType")
                        .WithMany()
                        .HasForeignKey("ConventionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocWorkflow", "CurrentWorkflow")
                        .WithMany()
                        .HasForeignKey("CurrentWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.IntellectualProperty.IntellectualProperty", "IntellectualProperty")
                        .WithOne("ProtectionDoc")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "IntellectualPropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicSelectionAchieveType", "SelectionAchieveType")
                        .WithMany()
                        .HasForeignKey("SelectionAchieveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicSendType", "SendType")
                        .WithMany()
                        .HasForeignKey("SendTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "SpeciesTradeMark")
                        .WithMany()
                        .HasForeignKey("SpeciesTradeMarkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicProtectionDocStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "SupportUser")
                        .WithMany()
                        .HasForeignKey("SupportUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTypeTrademark", "TypeTrademark")
                        .WithMany()
                        .HasForeignKey("TypeTrademarkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocConventionInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", "EarlyRegType")
                        .WithMany()
                        .HasForeignKey("EarlyRegTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("ProtectionDocConventionInfos")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocCustomer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("ProtectionDocCustomers")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocDocument", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("ProtectionDocs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("Documents")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocEarlyReg", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", "EarlyRegType")
                        .WithMany()
                        .HasForeignKey("EarlyRegTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("EarlyRegs")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "RegCountry")
                        .WithMany()
                        .HasForeignKey("RegCountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "BreedCountry")
                        .WithMany()
                        .HasForeignKey("BreedCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithOne("ProtectionDocInfo")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocInfo", "ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocRedefine", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRedefinitionType", "RedefinitionType")
                        .WithMany()
                        .HasForeignKey("RedefinitionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDocWorkflow", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "Owner")
                        .WithMany("Workflows")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "SecondaryCurrentUser")
                        .WithMany()
                        .HasForeignKey("SecondaryCurrentUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.AdditionalDoc", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "OfficeOfOriginCountry")
                        .WithMany()
                        .HasForeignKey("OfficeOfOriginCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("AdditionalDocs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ExpertSearchSimilar", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("ExpertSearchSimilarities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "SimilarProtectionDoc")
                        .WithMany("ExpertSearchSimilarities")
                        .HasForeignKey("SimilarProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "SimilarRequest")
                        .WithMany()
                        .HasForeignKey("SimilarRequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ICGSRequest", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICGS", "Icgs")
                        .WithMany()
                        .HasForeignKey("IcgsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("ICGSRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.ICISRequest", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicICIS", "Icis")
                        .WithMany()
                        .HasForeignKey("IcisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("ICISRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.IPCRequest", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicIPC", "Ipc")
                        .WithMany()
                        .HasForeignKey("IpcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("IPCRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.Request", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Addressee")
                        .WithMany()
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicBeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicConventionType", "ConventionType")
                        .WithMany()
                        .HasForeignKey("ConventionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.RequestWorkflow", "CurrentWorkflow")
                        .WithMany()
                        .HasForeignKey("CurrentWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDivision", "FlDivision")
                        .WithMany()
                        .HasForeignKey("FlDivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Attachment", "MainAttachment")
                        .WithMany()
                        .HasForeignKey("MainAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocType", "ProtectionDocType")
                        .WithMany()
                        .HasForeignKey("ProtectionDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicReceiveType", "ReceiveType")
                        .WithMany()
                        .HasForeignKey("ReceiveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicSelectionAchieveType", "SelectionAchieveType")
                        .WithMany()
                        .HasForeignKey("SelectionAchieveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicProtectionDocSubType", "SpeciesTradeMark")
                        .WithMany()
                        .HasForeignKey("SpeciesTradeMarkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTypeTrademark", "TypeTrademark")
                        .WithMany()
                        .HasForeignKey("TypeTrademarkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestConventionInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", "EarlyRegType")
                        .WithMany()
                        .HasForeignKey("EarlyRegTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("RequestConventionInfos")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestCustomer", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicCustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("RequestCustomers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestDocument", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany("Requests")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("Documents")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestEarlyReg", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicEarlyRegType", "EarlyRegType")
                        .WithMany()
                        .HasForeignKey("EarlyRegTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "RegCountry")
                        .WithMany()
                        .HasForeignKey("RegCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("EarlyRegs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestInfo", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.Location.DicCountry", "BreedCountry")
                        .WithMany()
                        .HasForeignKey("BreedCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithOne("RequestInfo")
                        .HasForeignKey("Iserv.Niis.Domain.Entities.Request.RequestInfo", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestNotificationStatus", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicNotificationStatus", "NotificationStatus")
                        .WithMany("Requests")
                        .HasForeignKey("NotificationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestProtectionDocSimilar", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany("RequestProtectionDocSimilarities")
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany("RequestProtectionDocSimilarities")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Request.RequestWorkflow", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Owner")
                        .WithMany("Workflows")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicMain.DicRoute", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Rules.PaymentInvoiceChargingRule", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "NextStage")
                        .WithMany()
                        .HasForeignKey("NextStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicTariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.ApplicationUser", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.AccountingData.DicCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Security.DocumentAccessPermissions", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser")
                        .WithMany("DocumentAccessRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Settings.GridPrintSetting", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Settings.SettingGridOption", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.System.GeneratedInvoiceNumber", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Iserv.Niis.Domain.Entities.Workflow.WorkflowTaskQueue", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "ConditionStage")
                        .WithMany()
                        .HasForeignKey("ConditionStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Contract.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.ProtectionDoc.ProtectionDoc", "ProtectionDoc")
                        .WithMany()
                        .HasForeignKey("ProtectionDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Request.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Dictionaries.DicRouteStage", "ResultStage")
                        .WithMany()
                        .HasForeignKey("ResultStageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Iserv.Niis.Domain.Entities.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
